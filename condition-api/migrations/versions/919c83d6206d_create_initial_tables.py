"""create_initial_tables

Revision ID: 919c83d6206d
Revises: 
Create Date: 2024-10-02 13:59:58.613976

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '919c83d6206d'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('projects',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('project_id', sa.String(length=255), nullable=False),
    sa.Column('project_name', sa.Text(), nullable=True),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('project_id'),
    sa.UniqueConstraint('project_id', name='uq_project'),
    schema='condition'
    )
    op.create_table('user_status',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('status_name', sa.String(length=50), nullable=True),
    sa.Column('description', sa.String(length=50), nullable=True),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='condition'
    )
    op.create_table('documents',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('document_id', sa.String(length=255), nullable=False),
    sa.Column('amended_id', sa.Integer(), nullable=True),
    sa.Column('document_type', sa.String(length=100), nullable=False),
    sa.Column('display_name', sa.Text(), nullable=True),
    sa.Column('document_file_name', sa.Text(), nullable=True),
    sa.Column('date_issued', sa.Date(), nullable=True),
    sa.Column('act', sa.Integer(), nullable=True),
    sa.Column('first_nations', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('consultation_records_required', sa.Boolean(), nullable=True),
    sa.Column('project_id', sa.String(length=255), nullable=True),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['amended_id'], ['condition.documents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['condition.projects.project_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('document_id', name='uq_document'),
    schema='condition'
    )
    op.create_table('conditions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('project_id', sa.String(), nullable=False),
    sa.Column('document_id', sa.String(), nullable=False),
    sa.Column('condition_name', sa.Text(), nullable=True),
    sa.Column('condition_number', sa.Integer(), nullable=True),
    sa.Column('condition_text', sa.Text(), nullable=True),
    sa.Column('topic_tags', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('subtopic_tags', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('effective_from', sa.DateTime(), nullable=True),
    sa.Column('effective_to', sa.DateTime(), nullable=True),
    sa.Column('is_approved', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['condition.projects.project_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['document_id'], ['condition.documents.document_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='condition'
    )
    op.create_table('staff_users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=False),
    sa.Column('middle_name', sa.String(length=50), nullable=True),
    sa.Column('last_name', sa.String(length=50), nullable=False),
    sa.Column('email_address', sa.String(length=100), nullable=False),
    sa.Column('contact_number', sa.String(length=50), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=True),
    sa.Column('external_id', sa.String(length=50), nullable=False),
    sa.Column('status_id', sa.Integer(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['status_id'], ['condition.user_status.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('external_id'),
    schema='condition'
    )
    with op.batch_alter_table('staff_users', schema='condition') as batch_op:
        batch_op.create_index(batch_op.f('ix_staff_users_username'), ['username'], unique=True)

    op.create_table('condition_requirements',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('condition_id', sa.Integer(), nullable=False),
    sa.Column('document_id', sa.String(), nullable=False),
    sa.Column('deliverable_name', sa.Text(), nullable=True),
    sa.Column('is_plan', sa.Boolean(), nullable=True),
    sa.Column('approval_type', sa.Text(), nullable=True),
    sa.Column('stakeholders_to_consult', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('stakeholders_to_submit_to', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('consultation_required', sa.Boolean(), nullable=True),
    sa.Column('related_phase', sa.Text(), nullable=True),
    sa.Column('days_prior_to_commencement', sa.Integer(), nullable=True),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['condition_id'], ['condition.conditions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='condition'
    )
    op.create_table('subconditions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('condition_id', sa.Integer(), nullable=True),
    sa.Column('subcondition_identifier', sa.String(), nullable=True),
    sa.Column('subcondition_text', sa.Text(), nullable=True),
    sa.Column('parent_subcondition_id', sa.Integer(), nullable=True),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['condition_id'], ['condition.conditions.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_subcondition_id'], ['condition.subconditions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='condition'
    )

    # Granting privileges to a role on all created tables
    op.execute("""
        GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA condition TO condition;
    """)

    # Grant privileges on sequences in schema 'condition'
    op.execute("""
        GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA condition TO condition;
    """)

    # Additional grants for sequences if needed
    op.execute("""
        GRANT UPDATE ON SEQUENCE condition.projects_id_seq TO condition;
    """)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('subconditions', schema='condition')
    op.drop_table('condition_requirements', schema='condition')
    with op.batch_alter_table('condition.staff_users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_staff_users_username'))

    op.drop_table('staff_users', schema='condition')
    op.drop_table('documents', schema='condition')
    op.drop_table('conditions', schema='condition')
    op.drop_table('user_status', schema='condition')
    op.drop_table('projects', schema='condition')
    # ### end Alembic commands ###
