"""create_initial_tables

Revision ID: 704b7a6d5500
Revises: 
Create Date: 2024-11-23 22:18:35.311173

"""
from alembic import op
import sqlalchemy as sa
from datetime import datetime


# revision identifiers, used by Alembic.
revision = '704b7a6d5500'
down_revision = None
branch_labels = None
depends_on = None


# Values to be inserted into the attribute_keys table
attribute_keys = [
    {"key_name": "Requires consultation", "created_date": datetime.utcnow()},
    {"key_name": "Parties required to be submitted", "created_date": datetime.utcnow()},
    {"key_name": "Parties required to be consulted", "created_date": datetime.utcnow()},
    {"key_name": "Deliverable Name", "created_date": datetime.utcnow()},
    {"key_name": "Requires management plan", "created_date": datetime.utcnow()},
    {"key_name": "Submitted to EAO for", "created_date": datetime.utcnow()},
    {"key_name": "Time associated with submission milestone", "created_date": datetime.utcnow()},
    {"key_name": "Milestone related to plan submission", "created_date": datetime.utcnow()},
    {"key_name": "Milestone(s) related to plan implementation", "created_date": datetime.utcnow()},
    {"key_name": "Management Plan Acronym", "created_date": datetime.utcnow()},
]

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('attribute_keys',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('key_name', sa.Text(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('key_name'),
    schema='condition'
    )
    op.create_table('projects',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('project_id', sa.String(length=255), nullable=False),
    sa.Column('project_name', sa.Text(), nullable=True),
    sa.Column('project_type', sa.Text(), nullable=True),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('project_id'),
    sa.UniqueConstraint('project_id', name='uq_project'),
    schema='condition'
    )
    op.create_table('user_status',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('status_name', sa.String(length=50), nullable=True),
    sa.Column('description', sa.String(length=50), nullable=True),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='condition'
    )
    op.create_table('documents',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('document_id', sa.String(length=255), nullable=False),
    sa.Column('amended_id', sa.Integer(), nullable=True),
    sa.Column('document_type', sa.String(length=100), nullable=False),
    sa.Column('document_label', sa.Text(), nullable=True),
    sa.Column('document_link', sa.Text(), nullable=True),
    sa.Column('document_file_name', sa.Text(), nullable=True),
    sa.Column('date_issued', sa.Date(), nullable=True),
    sa.Column('act', sa.Integer(), nullable=True),
    sa.Column('first_nations', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('consultation_records_required', sa.Boolean(), nullable=True),
    sa.Column('project_id', sa.String(length=255), nullable=True),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['amended_id'], ['condition.documents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['condition.projects.project_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('document_id', name='uq_document'),
    schema='condition'
    )
    op.create_table('staff_users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=False),
    sa.Column('middle_name', sa.String(length=50), nullable=True),
    sa.Column('last_name', sa.String(length=50), nullable=False),
    sa.Column('position', sa.String(length=100), nullable=False),
    sa.Column('work_email_address', sa.String(length=100), nullable=False),
    sa.Column('work_contact_number', sa.String(length=50), nullable=False),
    sa.Column('auth_guid', sa.String(), nullable=False),
    sa.Column('status_id', sa.Integer(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['status_id'], ['condition.user_status.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='condition'
    )
    with op.batch_alter_table('staff_users', schema='condition') as batch_op:
        batch_op.create_index(batch_op.f('ix_condition_staff_users_auth_guid'), ['auth_guid'], unique=True)

    op.create_table('amendments',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=False),
    sa.Column('amended_document_id', sa.String(length=255), nullable=False),
    sa.Column('document_type', sa.String(length=100), nullable=False),
    sa.Column('amendment_name', sa.Text(), nullable=True),
    sa.Column('amendment_link', sa.Text(), nullable=True),
    sa.Column('date_issued', sa.Date(), nullable=True),
    sa.Column('act', sa.Integer(), nullable=True),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['condition.documents.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('amended_document_id', name='uq_amended_document'),
    schema='condition'
    )
    op.create_table('conditions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('project_id', sa.String(), nullable=False),
    sa.Column('document_id', sa.String(), nullable=False),
    sa.Column('amended_document_id', sa.String(), nullable=True),
    sa.Column('condition_name', sa.Text(), nullable=True),
    sa.Column('condition_number', sa.Integer(), nullable=True),
    sa.Column('condition_text', sa.Text(), nullable=True),
    sa.Column('topic_tags', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('subtopic_tags', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('effective_from', sa.DateTime(), nullable=True),
    sa.Column('effective_to', sa.DateTime(), nullable=True),
    sa.Column('is_approved', sa.Boolean(), nullable=True),
    sa.Column('is_topic_tags_approved', sa.Boolean(), nullable=True),
    sa.Column('is_condition_attributes_approved', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['amended_document_id'], ['condition.amendments.amended_document_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['document_id'], ['condition.documents.document_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['condition.projects.project_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='condition'
    )
    op.create_table('condition_attributes',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('condition_id', sa.Integer(), nullable=False),
    sa.Column('attribute_key_id', sa.Integer(), nullable=False),
    sa.Column('attribute_value', sa.Text(), nullable=True),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['attribute_key_id'], ['condition.attribute_keys.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['condition_id'], ['condition.conditions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='condition'
    )
    op.create_table('subconditions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('condition_id', sa.Integer(), nullable=True),
    sa.Column('amended_document_id', sa.String(), nullable=True),
    sa.Column('subcondition_identifier', sa.String(), nullable=True),
    sa.Column('subcondition_text', sa.Text(), nullable=True),
    sa.Column('parent_subcondition_id', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.String(length=50), nullable=True),
    sa.Column('updated_by', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['amended_document_id'], ['condition.amendments.amended_document_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['condition_id'], ['condition.conditions.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_subcondition_id'], ['condition.subconditions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='condition'
    )

    # Granting privileges to a role on all created tables
    op.execute("""
        GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA condition TO condition;
    """)

    # Grant privileges on sequences in schema 'condition'
    op.execute("""
        GRANT USAGE, SELECT, UPDATE ON ALL SEQUENCES IN SCHEMA condition TO condition;
    """)

    # Additional grants for sequences if needed
    op.execute("""
        GRANT UPDATE ON SEQUENCE condition.projects_id_seq TO condition;
    """)

    user_status = sa.table('user_status',
                           sa.column('id', sa.Integer),
                           sa.column('status_name', sa.String),
                           sa.column('description', sa.String),
                           sa.column('created_date', sa.DateTime),
                           sa.column('updated_date', sa.DateTime),
                           schema='condition')

    # Use op.bulk_insert with the table object
    op.bulk_insert(user_status, [
        {'id': 1, 'status_name': 'ACTIVE', 'description': 'Active User', 'created_date': datetime.utcnow(),
         'updated_date': datetime.utcnow()},
        {'id': 2, 'status_name': 'INACTIVE', 'description': 'Inactive User', 'created_date': datetime.utcnow(),
         'updated_date': datetime.utcnow()}
    ])

    # Insert initial data into the table
    op.bulk_insert(
        sa.table(
            'attribute_keys',
            sa.Column('key_name', sa.Text()),
            sa.Column('created_date', sa.DateTime()),
            schema='condition'
        ),
        attribute_keys
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('subconditions', schema='condition')
    op.drop_table('condition_attributes', schema='condition')
    op.drop_table('conditions', schema='condition')
    op.drop_table('amendments', schema='condition')
    with op.batch_alter_table('staff_users', schema='condition') as batch_op:
        batch_op.drop_index(batch_op.f('ix_condition_staff_users_auth_guid'))

    op.drop_table('staff_users', schema='condition')
    op.drop_table('documents', schema='condition')
    op.drop_table('user_status', schema='condition')
    op.drop_table('projects', schema='condition')
    op.drop_table('attribute_keys', schema='condition')
    # ### end Alembic commands ###
